// I'm just going to annotate the actual file.

// defines bit patterns for each exception level
#define EL0 0b00
#define EL1 0b01
#define EL2 0b10
#define EL3 0b11

// declares a new section
.section .text.init

// makes the _start symbol externally linked
.global _start
_start:
    // read cpu affinity, start core 0, halt rest
    mrs     x1, MPIDR_EL1
    and     x1, x1, #3
    cbz     x1, setup

halt:
    // core affinity != 0, halt it
    wfe
    b       halt

setup:
    // store the desired EL1 stack pointer in x1
    // use the same region immediately before this text region as a stack.
    adr     x1, _start

    // read the current exception level into x0 (ref: C5.2.1)
    // The current exception level is CurrentEl[3:2], which is why we mask and shift
	  // right
    mrs     x0, CurrentEL
    and     x0, x0, #0b1100
    lsr     x0, x0, #2

switch_to_el2:
    // switch to EL2 if we're in EL3. otherwise switch to EL1
    cmp     x0, EL3
    bne     switch_to_el1

    // set-up SCR_EL3 (bits 0, 4, 5, 7, 8, 10) (A53: 4.3.42)
    // bit 0: indicate that EL0 and EL1 are in non-secure state, and therefore cannot
    // access secure memory.
    // bit 4: reserved, unclear
    // bit 5: reserved, unclear
    // bit 7: secure monitor call instructions are undefined at EL1 and above.
    // bit 8: hypervisor call instructions are enabled at EL1 and above.
    // bit 10: execution state for lower levels. The next lower level is Aarch64
    mov     x2, #0x5b1
    msr     SCR_EL3, x2

    // set-up SPSR and PL switch! (bits 0, 3, 6, 7, 8, 9) (ref: C5.2.20)
    // bit 0: exception level determines the SP
    // bit 3: indicates that the exception came from EL2 or EL3 (not sure this is right)
    // bit 6: mask FIQ
    // bit 7: mask IRQ
    // bit 8: mask SError
    // bit 9: Watchpoint, breakpoint, and software step exceptions at the current
    // exception level are masked
    mov     x2, #0x3c9
    msr     SPSR_EL3, x2
    adr     x2, switch_to_el1
    msr     ELR_EL3, x2
    eret

switch_to_el1:
    // switch to EL1 if we're not already in EL1. otherwise continue with start
    cmp     x0, EL1
    beq     set_stack

    // set the stack-pointer for EL1
    // msr moves the given register into the given system register.
    // In this case, x1 was previously set to point at _start, so now
    // the stack will grow downwards below _start.
    msr     SP_EL1, x1

    // enable CNTP for EL1/EL0 (ref: D7.5.2, D7.5.13)
    // NOTE: This doesn't actually enable the counter stream.
    // 
    // CNTHCTL_EL2[0]: do not trap access to the physical counter
    // CNTHCTL_EL2[1]: do not trap access to the physical timer
    mrs     x0, CNTHCTL_EL2
    orr     x0, x0, #0b11
    msr     CNTHCTL_EL2, x0
    // set the offset between CNTPCT_EL0 and CNTVCT_EL0 to 0.
    msr     CNTVOFF_EL2, xzr

    // enable AArch64 in EL1 (A53: 4.3.36)
    mov     x0, #(1 << 31)      // Enable AArch64 for EL1
    orr     x0, x0, #(1 << 1)   // RES1 on A-53
    msr     HCR_EL2, x0
    // I have no idea why x0 is being reloaded with HCR_EL2 here.
    mrs     x0, HCR_EL2

    // enable floating point and SVE (SIMD) (A53: 4.3.38, 4.3.34)
    // all CPTR bitfields are 1 when trapping is desired, so clearing this
    // entire register has the effect of disabling all traps related to SVE.
    msr     CPTR_EL2, xzr     // don't trap accessing SVE registers
    // The following three instructions disable trapping to EL1 for SVE and FP
    // instructions.
    mrs     x0, CPACR_EL1
    orr     x0, x0, #(0b11 << 20)
    msr     CPACR_EL1, x0

    // Set SCTLR to known state (RES1: 11, 20, 22, 23, 28, 29) (A53: 4.3.30)
    // An interesting note is that these bits do have specific functions in the
    ARMv8 architecture, however they are not mandatory for an implementation,
    and A53 does not implement any of these bits and treats them as reserved.
    mov     x2, #0x0800
    movk    x2, #0x30d0, lsl #16
    msr     SCTLR_EL1, x2

    // set up exception handlers
    // FIXME: load `_vectors` addr into appropriate register (guide: 10.4)

    // change execution level to EL1 (ref: C5.2.19)
    // 0x3c5 -> 0b0011 1100 0101
    // bits 3:0 -> state exception was taken from. 0101 indicates EL1h, which
    // means to use SP for EL1, not EL0.
    // bit 6: mask FIQ
    // bit 7: mask IRQ
    // bit 8: mask Serror
    // bit 9: Watchpoint, Breakpoint, and Software Step exceptions targeted at
    // the current Exception level are masked.
    mov     x2, #0x3c5
    msr     SPSR_EL2, x2
    // FIXME: Return to EL1 at `set_stack`.

set_stack:
    // set the current stack pointer
    mov     sp, x1

zero_bss:
    // load the start address and number of bytes in BSS section
    // __bss_start and __bss_length are symbols defined in the ld script.
    ldr     x1, =__bss_start
    ldr     x2, =__bss_length

zero_bss_loop:
    // zero out the BSS section, 64-bits at a time
    cbz     x2, go_kmain
    str     xzr, [x1], #8
    sub     x2, x2, #8
    cbnz    x2, zero_bss_loop

go_kmain:
    // jump to kmain, which shouldn't return. halt if it does
    bl      kmain
    b       halt

context_save:
    // FIXME: Save the remaining context to the stack.

.global context_restore
context_restore:
    // FIXME: Restore the context from the stack.

    ret

#define HANDLER(source, kind) \
    .align 7; \
    stp     lr, x0, [SP, #-16]!; \
    mov     x0, ##source; \
    movk    x0, ##kind, LSL #16; \
    bl      context_save; \
    ldp     lr, x0, [SP], #16; \
    eret

.align 11
_vectors:
    // FIXME: Setup the 16 exception vectors.
